// auto-generated by bsg_ascii_to_rom.py from /home/wuc29/ee526/Arnolds-Cat-Map-Image-Encryption/ASIC/encryptor/bsg_acm_cell/v/trace.tr; do not modify
module trace_rom #(`BSG_INV_PARAM(width_p), `BSG_INV_PARAM(addr_width_p))
(input  [addr_width_p-1:0] addr_i
,output logic [width_p-1:0]      data_o
);
always_comb case(addr_i)
                                 // #####################################################################
                                 // # |<    4-bits    >|<      1-bit      >|<    1-bit   >|<   8-bits  >|
                                 // # +----------------+-------------------+--------------+-------------+
                                 // # | replay command | 0:update 1:enable | update value | 8 neighbors |
                                 // # +----------------+-------------------+--------------+-------------+
                                 // #####################################################################
                                 // # EXAMPLES:
                                 // # Update, value = 1
         0: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
         1: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b01000100
         2: data_o = width_p ' (14'b0001__1_0_01000100); // 0x0644
                                 // # Recv 1, a live cell with two live neighbours lives on to the next generation.
         3: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # TODO: Add more testing traces here!!!
                                 // # Please create at least 20 test cases:
                                 // # Set the update value to 0, then set enbale to 1 and test with 0-8 live neighbors
                                 // # Set the update value to 1, then set enbale to 1 and test with 0-8 live neighbors
                                 // # TEST DEAD CELL CONDITION
                                 // # Set the update value to 0, then set enbale to 1 and test with 0-8 live neighbors
                                 // # Update, value = 0
         4: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
         5: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00000000 (0 live neighbors)
         6: data_o = width_p ' (14'b0001__1_0_00000000); // 0x0600
                                 // # Recv 0, a dead cell with no live neighbor is still dead on to the next generation.
         7: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00000001 (1 live neighbor)
         8: data_o = width_p ' (14'b0001__1_0_00000001); // 0x0601
                                 // # Recv 0, a dead cell with 1 neighbor is still dead on to the next generation.
         9: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00000011 (2 live neighbors)
        10: data_o = width_p ' (14'b0001__1_0_00000011); // 0x0603
                                 // # Recv 0, a dead cell with 2 neighbors is still dead on to the next generation.
        11: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00111000 (3 live neighbors)
        12: data_o = width_p ' (14'b0001__1_0_00111000); // 0x0638
                                 // # Recv 1, a dead cell with 3 neighbors is live on to the next generation.
        13: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # RESET BACK TO DEAD CONDITION
                                 // # Update, value = 0
        14: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        15: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b00111100 (4 live neighbors)
        16: data_o = width_p ' (14'b0001__1_0_00111100); // 0x063C
                                 // # Recv 0, a dead cell with 4 neighbors is still dead on to the next generation.
        17: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b10111100 (5 live neighbors)
        18: data_o = width_p ' (14'b0001__1_0_10111100); // 0x06BC
                                 // # Recv 0, a dead cell with 5 neighbors is still dead on to the next generation.
        19: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b10111101 (6 live neighbors)
        20: data_o = width_p ' (14'b0001__1_0_10111101); // 0x06BD
                                 // # Recv 0, a dead cell with 6 neighbors is still dead on to the next generation.
        21: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b10111111 (7 live neighbors)
        22: data_o = width_p ' (14'b0001__1_0_10111101); // 0x06BD
                                 // # Recv 0, a dead cell with 7 neighbors is still dead on to the next generation.
        23: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Enable, 8 neighbors = 8'b11111111 (8 live neighbors)
        24: data_o = width_p ' (14'b0001__1_0_10111101); // 0x06BD
                                 // # Recv 0, a dead cell with 8 neighbors is still dead on to the next generation.
        25: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # TEST LIVE CELL CONDITION
                                 // # && set en_i and update_val_i to 1 simultaneously to see that update_val_i does not interfere with en_i
                                 // # Set the update value to 1, then set enbale to 1 and test with 0-8 live neighbors
                                 // # Update, value = 1
        26: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        27: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00000000 (0 live neighbors)
        28: data_o = width_p ' (14'b0001__1_1_00000000); // 0x0700
                                 // # Recv 0, a live cell with no live neighbor is dead on to the next generation.
        29: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        30: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        31: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00000001 (1 live neighbor)
        32: data_o = width_p ' (14'b0001__1_1_00000001); // 0x0701
                                 // # Recv 0, a live cell with 1 neighbor is still dead on to the next generation.
        33: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        34: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        35: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00000011 (2 live neighbors)
        36: data_o = width_p ' (14'b0001__1_1_00000011); // 0x0703
                                 // # Recv 1, a live cell with 2 neighbors is still alive on to the next generation.
        37: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00111000 (3 live neighbors)
        38: data_o = width_p ' (14'b0001__1_1_00111000); // 0x0738
                                 // # Recv 1, a live cell with 3 neighbors is still alive on to the next generation.
        39: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b00111100 (4 live neighbors)
        40: data_o = width_p ' (14'b0001__1_1_00111100); // 0x073C
                                 // # Recv 0, a live cell with 4 neighbors is dead on to the next generation.
        41: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        42: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        43: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b10111100 (5 live neighbors)
        44: data_o = width_p ' (14'b0001__1_1_10111100); // 0x07BC
                                 // # Recv 0, a live cell with 5 neighbors is dead on to the next generation.
        45: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        46: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        47: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b10111101 (6 live neighbors)
        48: data_o = width_p ' (14'b0001__1_1_10111101); // 0x07BD
                                 // # Recv 0, a live cell with 6 neighbors is dead on to the next generation.
        49: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        50: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        51: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b10111111 (7 live neighbors)
        52: data_o = width_p ' (14'b0001__1_1_10111101); // 0x07BD
                                 // # Recv 0, a live cell with 7 neighbors is dead on to the next generation.
        53: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 1
        54: data_o = width_p ' (14'b0001__0_1_00000000); // 0x0500
                                 // # Recv 1, live cell
        55: data_o = width_p ' (14'b0010__000000000_1); // 0x0801
                                 // # Enable, 8 neighbors = 8'b11111111 (8 live neighbors)
        56: data_o = width_p ' (14'b0001__1_1_10111101); // 0x07BD
                                 // # Recv 0, a live cell with 8 neighbors is dead on to the next generation.
        57: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Update, value = 0
        58: data_o = width_p ' (14'b0001__0_0_00000000); // 0x0400
                                 // # Recv 0, dead cell
        59: data_o = width_p ' (14'b0010__000000000_0); // 0x0800
                                 // # Finish simulation
        60: data_o = width_p ' (14'b0100__0_0_00000000); // 0x1000
   default: data_o = 'X;
endcase
endmodule
`BSG_ABSTRACT_MODULE(trace_rom)
